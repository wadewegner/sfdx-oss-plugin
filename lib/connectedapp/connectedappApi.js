"use strict";

const path = require("path");
const fs = require("fs");
const forge = require("node-forge");

const forceUtils = require("../forceUtils.js");
const certs = require("../certs.js");
const messages = require(path.join(__dirname, "..", "messages"))();

// Private helper functions

/**
 * Describe the utility of your plugin *
 */
class ConnectedApp {
    /**
     * Public members of the Offense class
     * @yourParam {type} description
     * @returns {Promise}.
     */

    create(context) {
        const targetUsername = context.flags.targetusername;
        const connectedAppName = context.flags.name;
        let callbackurl = context.flags.callbackurl;
        if (!callbackurl) {
            callbackurl = "sfdx://success";
        }
        const createCerts = context.flags.certificate;
        let appDescription = context.flags.description;
        if (!appDescription) {
            appDescription = "generated by wadewegner:connectedapp:create";
        }
        const origScopes = context.flags.scopes;
        let appScopes = [];
        if (origScopes) {
            appScopes = origScopes.split(",");
        } else {
            appScopes = ["Basic", "Api", "Web", "RefreshToken"];
        }

        const generatedConsumerSecret = forceUtils.getConsumerSecret();

        return forceUtils.getOrg(targetUsername, org => {
            const pki = forge.pki;
            const keys = pki.rsa.generateKeyPair(2048);
            const privKey = forge.pki.privateKeyToPem(keys.privateKey);

            certs.getSelfSignedCertificate(pki, keys, cert => {
                let pubKey;

                if (createCerts) {
                    pubKey = pki.certificateToPem(cert);

                    fs.writeFile("server.key", privKey, err => {
                        if (err) {
                            return console.log(err); // eslint-disable-line no-console
                        }
                    });

                    fs.writeFile("server.crt", pubKey, err => {
                        if (err) {
                            return console.log(err); // eslint-disable-line no-console
                        }
                    });
                }

                org.force._getConnection(org, org.config).then(conn => {
                    let metadata;

                    if (createCerts) {
                        metadata = [
                            {
                                contactEmail: org.getName(),
                                description: appDescription,
                                fullName: connectedAppName,
                                label: connectedAppName,
                                oauthConfig: {
                                    callbackUrl: callbackurl,
                                    consumerSecret: generatedConsumerSecret,
                                    certificate: pubKey,
                                    scopes: appScopes
                                }
                            }
                        ];
                    } else {
                        metadata = [
                            {
                                contactEmail: org.getName(),
                                description: appDescription,
                                fullName: connectedAppName,
                                label: connectedAppName,
                                oauthConfig: {
                                    callbackUrl: callbackurl,
                                    consumerSecret: generatedConsumerSecret,
                                    scopes: appScopes
                                }
                            }
                        ];
                    }

                    conn.metadata.create(
                        "ConnectedApp",
                        metadata,
                        (createErr, results) => {
                            if (createErr) {
                                console.log(createErr);
                            } else if (results.success) {
                                conn.metadata.read(
                                    "ConnectedApp",
                                    connectedAppName,
                                    (readErr, metadataResult) => {
                                        if (readErr) {
                                            console.log(readErr);
                                        } else {
                                            console.log(metadataResult); // eslint-disable-line no-console
                                        }
                                    }
                                );
                            } else {
                                console.log(results); // eslint-disable-line no-console
                            }
                        }
                    );
                });
            });
        });
    }

    getHumanErrorMessage() {
        return "Your plugin ran into an error.";
    }
    getHumanSuccessMessage() {
        return "Your plugin ran successfully!";
    }

    list(context) {
        const targetUsername = context.flags.targetusername;
        const connectedappname = context.flags.connectedappname;

        return forceUtils.getOrg(targetUsername, org => {
            org.force._getConnection(org, org.config).then(conn => {
                conn.metadata.read(
                    "ConnectedApp",
                    connectedappname,
                    (readErr, metadataResult) => {
                        console.log(metadataResult); // eslint-disable-line no-console
                    }
                );
            });
        });
    }
}

module.exports = ConnectedApp;
